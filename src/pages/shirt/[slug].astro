---
import type { InferGetStaticParamsType } from "astro";
import { PortableText } from "astro-portabletext";
import { urlFor } from "../../utils/image";
import { getShirt, getShirts, type ShirtColor } from "../../utils/sanity";
import type { ImageAsset } from "sanity";
import ProductLayout from "../../layouts/ProductLayout.astro";
import ProductSelection from "../../components/shop/ProductSelection.vue";
import { Picture } from "astro-imagetools/components";

export async function getStaticPaths() {
  const shirts = await getShirts();
  return shirts.map((shirt) => ({
    params: { slug: shirt.slug.current },
  }));
}

type Params = InferGetStaticParamsType<typeof getStaticPaths>;
const { slug } = Astro.params as Params;

const shirt = await getShirt(slug);
// console.log(shirt)
const [colorMap, colors, sizes, images]: [
  Record<string, boolean>,
  ShirtColor[],
  string[],
  ImageAsset[],
] = shirt.variants.reduce(
  (acc, variant) => {
    if (!acc[0][variant.color.colorName]) {
      acc[0][variant.color.colorName] = true;
      acc[3].push(...variant.images.map((i) => i.asset));
    } else if (!acc[0][variant.size]) {
      acc[0][variant.size] = true;
      acc[3].push(...variant.images.map((i) => i.asset));
    }
    // acc[0] = [...acc[0], variant.images.map((i) => i.asset)].flat()

    acc[1] = acc[1].some(
      (color: ShirtColor) => color.colorName == variant.color.colorName,
    )
      ? acc[1]
      : [...acc[1], variant.color];

    acc[2] = acc[2].some((size) => size == variant.size)
      ? acc[2]
      : [...acc[2], variant.size];
    // acc[2].concat(acc[2].filter((size) => size != variant.size))
    return acc;
  },
  [{}, [], [], []],
);
// console.log(colorMap, colors, sizes, images.length)
---

<ProductLayout title={shirt.name} description={shirt.excerpt}>
  <section class="container mt-5 grid sm:grid-cols-2">
    <h1 class="font-accent text-4xl sm:col-start-2">
      {shirt.name}
    </h1>
    <ProductSelection product={shirt} client:load />
    <div class="sm:col-start-2">
      <PortableText value={shirt.description} />
      {
        shirt.variants?.map((shirtV) => {
          return shirtV.sku;
        })
      }
      <button
        class="snipcart-add-item rounded-full bg-accent px-4 py-2 font-bold text-white hover:opacity-80"
        data-item-id={shirt.slug.current}
        data-item-price={shirt.price}
        data-item-description={shirt.description}
        data-item-name={shirt.name}
        data-item-custom1-name="Shirt size"
        data-item-custom1-options={shirt.variants.map((v) => v.size).join("|")}
        data-item-quantity="1"
      >
        Add to cart
      </button>
    </div>
    <!-- {
      images.map((image) => (
        <div class="transition-transform duration-500 group-hover:-translate-y-1 group-hover:scale-105">
          <Picture
            src={urlFor(image).url()}
            alt="A cool shirt"
            width={170}
            height={170}
            layout="fixed"
          />
        </div>
      ))
    } -->
  </section>
</ProductLayout>
